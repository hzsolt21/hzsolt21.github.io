---
layout: post
title:  "RF 433"
date:   2018-05-29 18:05:55 +0300
image:  433MhzRemote.png
tags:   [Hardware]
---
<h1>Hacking a cheap remote control</h1>
<h2>Story and the WHY?</h2>

One day I thought that it would be a good idea to order a cheap chinese remote controlled  light switch. I liked it so much, It made my life easier. I could just turn off and on the lights. No more walking to the bad in the dark! It has this nice little remote control. I should have gone for the wifi one. It looks so nice I do not want to throw it out. So I grabbed my arduino, sensors wifi module and made a little gadget that allowed me to control my light with wifi. 

A few months later I went to the dentist. door was remote controlled. Than I saw the same little remote control. Must be a special case I tough. Then I went for a job interview. The remote control was there. Again. Just like when you buy a new car and suddenly you start to see it everywhere. But one month before you could not find a single one on the street. I know now, these are everywhere. Need to make a device to hack them. 

<h2>Main Idea</h2>
Sometimes the easiest way can work really well. If we want to control something and we do not have the remote control, we can just try to figure out how it works. In this case, a quick googling told me that this is a remote control working on the frequency of 433 Mhz. That is not enough. So I opened the device. I saw a EV1527 chip there. Quick google and I found out that it has a few codes pre-programmed inside. No changing code, no encryption, nothing.
![An inside look](/img/433Replay/Inside433.jpg)

From there my objective was clear. Grab the code, and try to replay it. Simple, easy, it should work. That is the basic idea for most of the cheap remote controls.


<h2>Back to the basics</h2>
I will try to explain everything the easiest way. So what do we need to hack a device like this? First we need an Arduino. For the preparing part it is better to use an Arduino Uno or Mega. It is easy to change the wires, no need to solder them. Then we will some wires. We should not forget about the 433Mhz RF Decoder Transmitter/Receiver.

![Tools needed](/img/433Replay/ArduinoAndTools.jpg)

The receiver and the transmitter are separate module. That will come in handy later.
Now we need to instal Arduino IDE you can find a step by step guide here:
https://www.arduino.cc/en/Guide/Windows

https://www.arduino.cc/en/Guide/linux

<h2>Sniffing</h2>

So we have the IDE. Perfect. Now we  need the library for the module 433mhz. You can download it here: 

https://github.com/sui77/rc-switch/

All you need to do, is to unzip this to the library folder in your installation directory.
So everything is set up. We need to connect the arduino to the module and the arduino to the pc.  The bigger one is the receiver with 4 pins. GND -> GND VCC â†’ 5v  The Data pin closer to the GND will go to the arduino pin 2. Above the TX.
![Sniffing setup](/img/433Replay/sniffer.jpg)

The next step is to get the program to the arduino. It is really easy, thanks to our library. Just go to File > Examples >rc-switch and click on REceiveDemo_Simple. The project is loaded
/*
  Simple example for receiving
 
  https://github.com/sui77/rc-switch/
*/

#include <RCSwitch.h>

RCSwitch mySwitch = RCSwitch(); 

void setup() {
  Serial.begin(9600); //Begin serial port communication with the baud rate of 9600. Important for watching the incoming data on the computer
  mySwitch.enableReceive(0);  // Receiver on interrupt 0 => that is pin #2
}

void loop() { //need an infinite loop so the Arduino keeps running
  if (mySwitch.available()) { //only start to write when there is data available
    
    Serial.print("Received ");  
    Serial.print( mySwitch.getReceivedValue() ); 
    Serial.print(" / ");
    Serial.print( mySwitch.getReceivedBitlength() );
    Serial.print("bit ");
    Serial.print("Protocol: ");
    Serial.println( mySwitch.getReceivedProtocol() );

    mySwitch.resetAvailable();
  }
}

Now you need to check if everything is correct to upload the code to arduino. Go to Tools. It should look like the picture. COM port number does not matter. It is probably automatically set up by the IDE. Click on upload. After it is done, click on the magnifying glass icon. That is the serial monitor. That is where you can communicate with the arduino. Down in a dropdown box you will see the baud rate. Remember that we set a baud rate 9600 in the code? You should select 9600 just like there. All set up, now if you use the remote control it will detect the signal. You should see something like this when a signal is detected.

![Signal captured](/img/433Replay/serialmonitor.PNG)

Remember 1 detection is not always 100% so try it a few more times. Now that we have the code ( for me it is 15588040) we can try to re-play it and see if anything changes. 

<h2>Replay</h2>
This will be almost the same. Grab the transmitter and wire it up: VCC -> 5v GND -> GND Data ->pin 10

![Transmitter setup](/img/433Replay/transmitter.jpg)

Now the code, go to File > Examples >rc-switch and select send demo. Here we need a little bit of editing. I deleted everything in the loop except the send decimal line and a wait. here is my code:

#include <RCSwitch.h>

RCSwitch mySwitch = RCSwitch();

void setup() {

  Serial.begin(9600);
  // Transmitter is connected to Arduino Pin #10  
  mySwitch.enableTransmit(10);
}

void loop() {
  mySwitch.send(15588040, 24);
  delay(1000);  
}
Save and upload the same way as the receiver (change the number 15588040 to the number you sniffed). Now you should see the thing the controller should control change state every second. For me it is the lights.

<h2>What's next?</h2> 

This was an introduction of how to sniff these basic codes and replay the data. It is already capable to open some doors. Either way, we will update this project in the future and make it more useful.
